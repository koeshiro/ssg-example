/* tslint:disable */
/* eslint-disable */
/**
 * ssg-example
 * example backend for static site generation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: koeshiro@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BooksVolumeseriesinfo } from './BooksVolumeseriesinfo';
import {
    BooksVolumeseriesinfoFromJSON,
    BooksVolumeseriesinfoFromJSONTyped,
    BooksVolumeseriesinfoToJSON,
    BooksVolumeseriesinfoToJSONTyped,
} from './BooksVolumeseriesinfo';
import type { BooksVolumeVolumeInfoDimensions } from './BooksVolumeVolumeInfoDimensions';
import {
    BooksVolumeVolumeInfoDimensionsFromJSON,
    BooksVolumeVolumeInfoDimensionsFromJSONTyped,
    BooksVolumeVolumeInfoDimensionsToJSON,
    BooksVolumeVolumeInfoDimensionsToJSONTyped,
} from './BooksVolumeVolumeInfoDimensions';
import type { BooksVolumeVolumeInfoReadingModes } from './BooksVolumeVolumeInfoReadingModes';
import {
    BooksVolumeVolumeInfoReadingModesFromJSON,
    BooksVolumeVolumeInfoReadingModesFromJSONTyped,
    BooksVolumeVolumeInfoReadingModesToJSON,
    BooksVolumeVolumeInfoReadingModesToJSONTyped,
} from './BooksVolumeVolumeInfoReadingModes';
import type { BooksVolumeVolumeInfoPanelizationSummary } from './BooksVolumeVolumeInfoPanelizationSummary';
import {
    BooksVolumeVolumeInfoPanelizationSummaryFromJSON,
    BooksVolumeVolumeInfoPanelizationSummaryFromJSONTyped,
    BooksVolumeVolumeInfoPanelizationSummaryToJSON,
    BooksVolumeVolumeInfoPanelizationSummaryToJSONTyped,
} from './BooksVolumeVolumeInfoPanelizationSummary';
import type { BooksVolumeVolumeInfoIndustryIdentifiers } from './BooksVolumeVolumeInfoIndustryIdentifiers';
import {
    BooksVolumeVolumeInfoIndustryIdentifiersFromJSON,
    BooksVolumeVolumeInfoIndustryIdentifiersFromJSONTyped,
    BooksVolumeVolumeInfoIndustryIdentifiersToJSON,
    BooksVolumeVolumeInfoIndustryIdentifiersToJSONTyped,
} from './BooksVolumeVolumeInfoIndustryIdentifiers';
import type { BooksVolumeVolumeInfoImageLinks } from './BooksVolumeVolumeInfoImageLinks';
import {
    BooksVolumeVolumeInfoImageLinksFromJSON,
    BooksVolumeVolumeInfoImageLinksFromJSONTyped,
    BooksVolumeVolumeInfoImageLinksToJSON,
    BooksVolumeVolumeInfoImageLinksToJSONTyped,
} from './BooksVolumeVolumeInfoImageLinks';

/**
 * 
 * @export
 * @interface BooksVolumeVolumeInfo
 */
export interface BooksVolumeVolumeInfo {
    /**
     * AllowAnonLogging: Whether anonymous logging should be allowed.
     * @type {boolean}
     * @memberof BooksVolumeVolumeInfo
     */
    allowAnonLogging?: boolean;
    /**
     * Authors: The names of the authors and/or editors for this volume. (In LITE
     * projection)
     * @type {Array<string>}
     * @memberof BooksVolumeVolumeInfo
     */
    authors?: Array<string>;
    /**
     * AverageRating: The mean review rating for this volume. (min = 1.0, max =
     * 5.0)
     * @type {number}
     * @memberof BooksVolumeVolumeInfo
     */
    averageRating?: number;
    /**
     * CanonicalVolumeLink: Canonical URL for a volume. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    canonicalVolumeLink?: string;
    /**
     * Categories: A list of subject categories, such as "Fiction", "Suspense",
     * etc.
     * @type {Array<string>}
     * @memberof BooksVolumeVolumeInfo
     */
    categories?: Array<string>;
    /**
     * ComicsContent: Whether the volume has comics content.
     * @type {boolean}
     * @memberof BooksVolumeVolumeInfo
     */
    comicsContent?: boolean;
    /**
     * ContentVersion: An identifier for the version of the volume content (text &
     * images). (In LITE projection)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    contentVersion?: string;
    /**
     * Description: A synopsis of the volume. The text of the description is
     * formatted in HTML and includes simple formatting elements, such as b, i, and
     * br tags. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    description?: string;
    /**
     * Dimensions: Physical dimensions of this volume.
     * @type {BooksVolumeVolumeInfoDimensions}
     * @memberof BooksVolumeVolumeInfo
     */
    dimensions?: BooksVolumeVolumeInfoDimensions;
    /**
     * ImageLinks: A list of image links for all the sizes that are available. (In
     * LITE projection.)
     * @type {BooksVolumeVolumeInfoImageLinks}
     * @memberof BooksVolumeVolumeInfo
     */
    imageLinks?: BooksVolumeVolumeInfoImageLinks;
    /**
     * IndustryIdentifiers: Industry standard identifiers for this volume.
     * @type {Array<BooksVolumeVolumeInfoIndustryIdentifiers>}
     * @memberof BooksVolumeVolumeInfo
     */
    industryIdentifiers?: Array<BooksVolumeVolumeInfoIndustryIdentifiers>;
    /**
     * InfoLink: URL to view information about this volume on the Google Books
     * site. (In LITE projection)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    infoLink?: string;
    /**
     * Language: Best language for this volume (based on content). It is the
     * two-letter ISO 639-1 code such as 'fr', 'en', etc.
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    language?: string;
    /**
     * MainCategory: The main category to which this volume belongs. It will be the
     * category from the categories list returned below that has the highest
     * weight.
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    mainCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    maturityRating?: string;
    /**
     * PageCount: Total number of pages as per publisher metadata.
     * @type {number}
     * @memberof BooksVolumeVolumeInfo
     */
    pageCount?: number;
    /**
     * PanelizationSummary: A top-level summary of the panelization info in this
     * volume.
     * @type {BooksVolumeVolumeInfoPanelizationSummary}
     * @memberof BooksVolumeVolumeInfo
     */
    panelizationSummary?: BooksVolumeVolumeInfoPanelizationSummary;
    /**
     * PreviewLink: URL to preview this volume on the Google Books site.
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    previewLink?: string;
    /**
     * PrintType: Type of publication of this volume. Possible values are BOOK or
     * MAGAZINE.
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    printType?: string;
    /**
     * PrintedPageCount: Total number of printed pages in generated pdf
     * representation.
     * @type {number}
     * @memberof BooksVolumeVolumeInfo
     */
    printedPageCount?: number;
    /**
     * PublishedDate: Date of publication. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    publishedDate?: string;
    /**
     * Publisher: Publisher of this volume. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    publisher?: string;
    /**
     * RatingsCount: The number of review ratings for this volume.
     * @type {number}
     * @memberof BooksVolumeVolumeInfo
     */
    ratingsCount?: number;
    /**
     * ReadingModes: The reading modes available for this volume.
     * @type {BooksVolumeVolumeInfoReadingModes}
     * @memberof BooksVolumeVolumeInfo
     */
    readingModes?: BooksVolumeVolumeInfoReadingModes;
    /**
     * SamplePageCount: Total number of sample pages as per publisher metadata.
     * @type {number}
     * @memberof BooksVolumeVolumeInfo
     */
    samplePageCount?: number;
    /**
     * 
     * @type {BooksVolumeseriesinfo}
     * @memberof BooksVolumeVolumeInfo
     */
    seriesInfo?: BooksVolumeseriesinfo;
    /**
     * Subtitle: Volume subtitle. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    subtitle?: string;
    /**
     * Title: Volume title. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeVolumeInfo
     */
    title?: string;
}

/**
 * Check if a given object implements the BooksVolumeVolumeInfo interface.
 */
export function instanceOfBooksVolumeVolumeInfo(value: object): value is BooksVolumeVolumeInfo {
    return true;
}

export function BooksVolumeVolumeInfoFromJSON(json: any): BooksVolumeVolumeInfo {
    return BooksVolumeVolumeInfoFromJSONTyped(json, false);
}

export function BooksVolumeVolumeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BooksVolumeVolumeInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'allowAnonLogging': json['allowAnonLogging'] == null ? undefined : json['allowAnonLogging'],
        'authors': json['authors'] == null ? undefined : json['authors'],
        'averageRating': json['averageRating'] == null ? undefined : json['averageRating'],
        'canonicalVolumeLink': json['canonicalVolumeLink'] == null ? undefined : json['canonicalVolumeLink'],
        'categories': json['categories'] == null ? undefined : json['categories'],
        'comicsContent': json['comicsContent'] == null ? undefined : json['comicsContent'],
        'contentVersion': json['contentVersion'] == null ? undefined : json['contentVersion'],
        'description': json['description'] == null ? undefined : json['description'],
        'dimensions': json['dimensions'] == null ? undefined : BooksVolumeVolumeInfoDimensionsFromJSON(json['dimensions']),
        'imageLinks': json['imageLinks'] == null ? undefined : BooksVolumeVolumeInfoImageLinksFromJSON(json['imageLinks']),
        'industryIdentifiers': json['industryIdentifiers'] == null ? undefined : ((json['industryIdentifiers'] as Array<any>).map(BooksVolumeVolumeInfoIndustryIdentifiersFromJSON)),
        'infoLink': json['infoLink'] == null ? undefined : json['infoLink'],
        'language': json['language'] == null ? undefined : json['language'],
        'mainCategory': json['mainCategory'] == null ? undefined : json['mainCategory'],
        'maturityRating': json['maturityRating'] == null ? undefined : json['maturityRating'],
        'pageCount': json['pageCount'] == null ? undefined : json['pageCount'],
        'panelizationSummary': json['panelizationSummary'] == null ? undefined : BooksVolumeVolumeInfoPanelizationSummaryFromJSON(json['panelizationSummary']),
        'previewLink': json['previewLink'] == null ? undefined : json['previewLink'],
        'printType': json['printType'] == null ? undefined : json['printType'],
        'printedPageCount': json['printedPageCount'] == null ? undefined : json['printedPageCount'],
        'publishedDate': json['publishedDate'] == null ? undefined : json['publishedDate'],
        'publisher': json['publisher'] == null ? undefined : json['publisher'],
        'ratingsCount': json['ratingsCount'] == null ? undefined : json['ratingsCount'],
        'readingModes': json['readingModes'] == null ? undefined : BooksVolumeVolumeInfoReadingModesFromJSON(json['readingModes']),
        'samplePageCount': json['samplePageCount'] == null ? undefined : json['samplePageCount'],
        'seriesInfo': json['seriesInfo'] == null ? undefined : BooksVolumeseriesinfoFromJSON(json['seriesInfo']),
        'subtitle': json['subtitle'] == null ? undefined : json['subtitle'],
        'title': json['title'] == null ? undefined : json['title'],
    };
}

export function BooksVolumeVolumeInfoToJSON(json: any): BooksVolumeVolumeInfo {
    return BooksVolumeVolumeInfoToJSONTyped(json, false);
}

export function BooksVolumeVolumeInfoToJSONTyped(value?: BooksVolumeVolumeInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'allowAnonLogging': value['allowAnonLogging'],
        'authors': value['authors'],
        'averageRating': value['averageRating'],
        'canonicalVolumeLink': value['canonicalVolumeLink'],
        'categories': value['categories'],
        'comicsContent': value['comicsContent'],
        'contentVersion': value['contentVersion'],
        'description': value['description'],
        'dimensions': BooksVolumeVolumeInfoDimensionsToJSON(value['dimensions']),
        'imageLinks': BooksVolumeVolumeInfoImageLinksToJSON(value['imageLinks']),
        'industryIdentifiers': value['industryIdentifiers'] == null ? undefined : ((value['industryIdentifiers'] as Array<any>).map(BooksVolumeVolumeInfoIndustryIdentifiersToJSON)),
        'infoLink': value['infoLink'],
        'language': value['language'],
        'mainCategory': value['mainCategory'],
        'maturityRating': value['maturityRating'],
        'pageCount': value['pageCount'],
        'panelizationSummary': BooksVolumeVolumeInfoPanelizationSummaryToJSON(value['panelizationSummary']),
        'previewLink': value['previewLink'],
        'printType': value['printType'],
        'printedPageCount': value['printedPageCount'],
        'publishedDate': value['publishedDate'],
        'publisher': value['publisher'],
        'ratingsCount': value['ratingsCount'],
        'readingModes': BooksVolumeVolumeInfoReadingModesToJSON(value['readingModes']),
        'samplePageCount': value['samplePageCount'],
        'seriesInfo': BooksVolumeseriesinfoToJSON(value['seriesInfo']),
        'subtitle': value['subtitle'],
        'title': value['title'],
    };
}

