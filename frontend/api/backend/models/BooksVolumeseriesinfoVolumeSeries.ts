/* tslint:disable */
/* eslint-disable */
/**
 * ssg-example
 * example backend for static site generation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: koeshiro@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BooksVolumeseriesinfoVolumeSeriesIssue } from './BooksVolumeseriesinfoVolumeSeriesIssue';
import {
    BooksVolumeseriesinfoVolumeSeriesIssueFromJSON,
    BooksVolumeseriesinfoVolumeSeriesIssueFromJSONTyped,
    BooksVolumeseriesinfoVolumeSeriesIssueToJSON,
    BooksVolumeseriesinfoVolumeSeriesIssueToJSONTyped,
} from './BooksVolumeseriesinfoVolumeSeriesIssue';

/**
 * 
 * @export
 * @interface BooksVolumeseriesinfoVolumeSeries
 */
export interface BooksVolumeseriesinfoVolumeSeries {
    /**
     * Issue: List of issues. Applicable only for Collection Edition and Omnibus.
     * @type {Array<BooksVolumeseriesinfoVolumeSeriesIssue>}
     * @memberof BooksVolumeseriesinfoVolumeSeries
     */
    issue?: Array<BooksVolumeseriesinfoVolumeSeriesIssue>;
    /**
     * OrderNumber: The book order number in the series.
     * @type {number}
     * @memberof BooksVolumeseriesinfoVolumeSeries
     */
    orderNumber?: number;
    /**
     * SeriesBookType: The book type in the context of series. Examples - Single
     * Issue, Collection Edition, etc.
     * @type {string}
     * @memberof BooksVolumeseriesinfoVolumeSeries
     */
    seriesBookType?: string;
    /**
     * SeriesId: The series id.
     * @type {string}
     * @memberof BooksVolumeseriesinfoVolumeSeries
     */
    seriesId?: string;
}

/**
 * Check if a given object implements the BooksVolumeseriesinfoVolumeSeries interface.
 */
export function instanceOfBooksVolumeseriesinfoVolumeSeries(value: object): value is BooksVolumeseriesinfoVolumeSeries {
    return true;
}

export function BooksVolumeseriesinfoVolumeSeriesFromJSON(json: any): BooksVolumeseriesinfoVolumeSeries {
    return BooksVolumeseriesinfoVolumeSeriesFromJSONTyped(json, false);
}

export function BooksVolumeseriesinfoVolumeSeriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): BooksVolumeseriesinfoVolumeSeries {
    if (json == null) {
        return json;
    }
    return {
        
        'issue': json['issue'] == null ? undefined : ((json['issue'] as Array<any>).map(BooksVolumeseriesinfoVolumeSeriesIssueFromJSON)),
        'orderNumber': json['orderNumber'] == null ? undefined : json['orderNumber'],
        'seriesBookType': json['seriesBookType'] == null ? undefined : json['seriesBookType'],
        'seriesId': json['seriesId'] == null ? undefined : json['seriesId'],
    };
}

export function BooksVolumeseriesinfoVolumeSeriesToJSON(json: any): BooksVolumeseriesinfoVolumeSeries {
    return BooksVolumeseriesinfoVolumeSeriesToJSONTyped(json, false);
}

export function BooksVolumeseriesinfoVolumeSeriesToJSONTyped(value?: BooksVolumeseriesinfoVolumeSeries | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'issue': value['issue'] == null ? undefined : ((value['issue'] as Array<any>).map(BooksVolumeseriesinfoVolumeSeriesIssueToJSON)),
        'orderNumber': value['orderNumber'],
        'seriesBookType': value['seriesBookType'],
        'seriesId': value['seriesId'],
    };
}

