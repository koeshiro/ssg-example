/* tslint:disable */
/* eslint-disable */
/**
 * ssg-example
 * example backend for static site generation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: koeshiro@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BooksVolumeAccessInfoPdf } from './BooksVolumeAccessInfoPdf';
import {
    BooksVolumeAccessInfoPdfFromJSON,
    BooksVolumeAccessInfoPdfFromJSONTyped,
    BooksVolumeAccessInfoPdfToJSON,
    BooksVolumeAccessInfoPdfToJSONTyped,
} from './BooksVolumeAccessInfoPdf';
import type { BooksVolumeAccessInfoEpub } from './BooksVolumeAccessInfoEpub';
import {
    BooksVolumeAccessInfoEpubFromJSON,
    BooksVolumeAccessInfoEpubFromJSONTyped,
    BooksVolumeAccessInfoEpubToJSON,
    BooksVolumeAccessInfoEpubToJSONTyped,
} from './BooksVolumeAccessInfoEpub';
import type { BooksDownloadAccessRestriction } from './BooksDownloadAccessRestriction';
import {
    BooksDownloadAccessRestrictionFromJSON,
    BooksDownloadAccessRestrictionFromJSONTyped,
    BooksDownloadAccessRestrictionToJSON,
    BooksDownloadAccessRestrictionToJSONTyped,
} from './BooksDownloadAccessRestriction';

/**
 * 
 * @export
 * @interface BooksVolumeAccessInfo
 */
export interface BooksVolumeAccessInfo {
    /**
     * AccessViewStatus: Combines the access and viewability of this volume into a
     * single status field for this user. Values can be FULL_PURCHASED,
     * FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    accessViewStatus?: string;
    /**
     * Country: The two-letter ISO_3166-1 country code for which this access
     * information is valid. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    country?: string;
    /**
     * DownloadAccess: Information about a volume's download license access
     * restrictions.
     * @type {BooksDownloadAccessRestriction}
     * @memberof BooksVolumeAccessInfo
     */
    downloadAccess?: BooksDownloadAccessRestriction;
    /**
     * DriveImportedContentLink: URL to the Google Drive viewer if this volume is
     * uploaded by the user by selecting the file from Google Drive.
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    driveImportedContentLink?: string;
    /**
     * Embeddable: Whether this volume can be embedded in a viewport using the
     * Embedded Viewer API.
     * @type {boolean}
     * @memberof BooksVolumeAccessInfo
     */
    embeddable?: boolean;
    /**
     * Epub: Information about epub content. (In LITE projection.)
     * @type {BooksVolumeAccessInfoEpub}
     * @memberof BooksVolumeAccessInfo
     */
    epub?: BooksVolumeAccessInfoEpub;
    /**
     * ExplicitOfflineLicenseManagement: Whether this volume requires that the
     * client explicitly request offline download license rather than have it done
     * automatically when loading the content, if the client supports it.
     * @type {boolean}
     * @memberof BooksVolumeAccessInfo
     */
    explicitOfflineLicenseManagement?: boolean;
    /**
     * Pdf: Information about pdf content. (In LITE projection.)
     * @type {BooksVolumeAccessInfoPdf}
     * @memberof BooksVolumeAccessInfo
     */
    pdf?: BooksVolumeAccessInfoPdf;
    /**
     * PublicDomain: Whether or not this book is public domain in the country
     * listed above.
     * @type {boolean}
     * @memberof BooksVolumeAccessInfo
     */
    publicDomain?: boolean;
    /**
     * QuoteSharingAllowed: Whether quote sharing is allowed for this volume.
     * @type {boolean}
     * @memberof BooksVolumeAccessInfo
     */
    quoteSharingAllowed?: boolean;
    /**
     * TextToSpeechPermission: Whether text-to-speech is permitted for this volume.
     * Values can be ALLOWED, ALLOWED_FOR_ACCESSIBILITY, or NOT_ALLOWED.
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    textToSpeechPermission?: string;
    /**
     * ViewOrderUrl: For ordered but not yet processed orders, we give a URL that
     * can be used to go to the appropriate Google Wallet page.
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    viewOrderUrl?: string;
    /**
     * Viewability: The read access of a volume. Possible values are PARTIAL,
     * ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed
     * above. A value of PARTIAL means that the publisher has allowed some portion
     * of the volume to be viewed publicly, without purchase. This can apply to
     * eBooks as well as non-eBooks. Public domain books will always have a value
     * of ALL_PAGES.
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    viewability?: string;
    /**
     * WebReaderLink: URL to read this volume on the Google Books site. Link will
     * not allow users to read non-viewable volumes.
     * @type {string}
     * @memberof BooksVolumeAccessInfo
     */
    webReaderLink?: string;
}

/**
 * Check if a given object implements the BooksVolumeAccessInfo interface.
 */
export function instanceOfBooksVolumeAccessInfo(value: object): value is BooksVolumeAccessInfo {
    return true;
}

export function BooksVolumeAccessInfoFromJSON(json: any): BooksVolumeAccessInfo {
    return BooksVolumeAccessInfoFromJSONTyped(json, false);
}

export function BooksVolumeAccessInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BooksVolumeAccessInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'accessViewStatus': json['accessViewStatus'] == null ? undefined : json['accessViewStatus'],
        'country': json['country'] == null ? undefined : json['country'],
        'downloadAccess': json['downloadAccess'] == null ? undefined : BooksDownloadAccessRestrictionFromJSON(json['downloadAccess']),
        'driveImportedContentLink': json['driveImportedContentLink'] == null ? undefined : json['driveImportedContentLink'],
        'embeddable': json['embeddable'] == null ? undefined : json['embeddable'],
        'epub': json['epub'] == null ? undefined : BooksVolumeAccessInfoEpubFromJSON(json['epub']),
        'explicitOfflineLicenseManagement': json['explicitOfflineLicenseManagement'] == null ? undefined : json['explicitOfflineLicenseManagement'],
        'pdf': json['pdf'] == null ? undefined : BooksVolumeAccessInfoPdfFromJSON(json['pdf']),
        'publicDomain': json['publicDomain'] == null ? undefined : json['publicDomain'],
        'quoteSharingAllowed': json['quoteSharingAllowed'] == null ? undefined : json['quoteSharingAllowed'],
        'textToSpeechPermission': json['textToSpeechPermission'] == null ? undefined : json['textToSpeechPermission'],
        'viewOrderUrl': json['viewOrderUrl'] == null ? undefined : json['viewOrderUrl'],
        'viewability': json['viewability'] == null ? undefined : json['viewability'],
        'webReaderLink': json['webReaderLink'] == null ? undefined : json['webReaderLink'],
    };
}

export function BooksVolumeAccessInfoToJSON(json: any): BooksVolumeAccessInfo {
    return BooksVolumeAccessInfoToJSONTyped(json, false);
}

export function BooksVolumeAccessInfoToJSONTyped(value?: BooksVolumeAccessInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessViewStatus': value['accessViewStatus'],
        'country': value['country'],
        'downloadAccess': BooksDownloadAccessRestrictionToJSON(value['downloadAccess']),
        'driveImportedContentLink': value['driveImportedContentLink'],
        'embeddable': value['embeddable'],
        'epub': BooksVolumeAccessInfoEpubToJSON(value['epub']),
        'explicitOfflineLicenseManagement': value['explicitOfflineLicenseManagement'],
        'pdf': BooksVolumeAccessInfoPdfToJSON(value['pdf']),
        'publicDomain': value['publicDomain'],
        'quoteSharingAllowed': value['quoteSharingAllowed'],
        'textToSpeechPermission': value['textToSpeechPermission'],
        'viewOrderUrl': value['viewOrderUrl'],
        'viewability': value['viewability'],
        'webReaderLink': value['webReaderLink'],
    };
}

