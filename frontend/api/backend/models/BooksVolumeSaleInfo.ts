/* tslint:disable */
/* eslint-disable */
/**
 * ssg-example
 * example backend for static site generation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: koeshiro@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BooksVolumeSaleInfoOffers } from './BooksVolumeSaleInfoOffers';
import {
    BooksVolumeSaleInfoOffersFromJSON,
    BooksVolumeSaleInfoOffersFromJSONTyped,
    BooksVolumeSaleInfoOffersToJSON,
    BooksVolumeSaleInfoOffersToJSONTyped,
} from './BooksVolumeSaleInfoOffers';
import type { BooksVolumeSaleInfoListPrice } from './BooksVolumeSaleInfoListPrice';
import {
    BooksVolumeSaleInfoListPriceFromJSON,
    BooksVolumeSaleInfoListPriceFromJSONTyped,
    BooksVolumeSaleInfoListPriceToJSON,
    BooksVolumeSaleInfoListPriceToJSONTyped,
} from './BooksVolumeSaleInfoListPrice';
import type { BooksVolumeSaleInfoRetailPrice } from './BooksVolumeSaleInfoRetailPrice';
import {
    BooksVolumeSaleInfoRetailPriceFromJSON,
    BooksVolumeSaleInfoRetailPriceFromJSONTyped,
    BooksVolumeSaleInfoRetailPriceToJSON,
    BooksVolumeSaleInfoRetailPriceToJSONTyped,
} from './BooksVolumeSaleInfoRetailPrice';

/**
 * 
 * @export
 * @interface BooksVolumeSaleInfo
 */
export interface BooksVolumeSaleInfo {
    /**
     * BuyLink: URL to purchase this volume on the Google Books site. (In LITE
     * projection)
     * @type {string}
     * @memberof BooksVolumeSaleInfo
     */
    buyLink?: string;
    /**
     * Country: The two-letter ISO_3166-1 country code for which this sale
     * information is valid. (In LITE projection.)
     * @type {string}
     * @memberof BooksVolumeSaleInfo
     */
    country?: string;
    /**
     * IsEbook: Whether or not this volume is an eBook (can be added to the My
     * eBooks shelf).
     * @type {boolean}
     * @memberof BooksVolumeSaleInfo
     */
    isEbook?: boolean;
    /**
     * ListPrice: Suggested retail price. (In LITE projection.)
     * @type {BooksVolumeSaleInfoListPrice}
     * @memberof BooksVolumeSaleInfo
     */
    listPrice?: BooksVolumeSaleInfoListPrice;
    /**
     * Offers: Offers available for this volume (sales and rentals).
     * @type {Array<BooksVolumeSaleInfoOffers>}
     * @memberof BooksVolumeSaleInfo
     */
    offers?: Array<BooksVolumeSaleInfoOffers>;
    /**
     * OnSaleDate: The date on which this book is available for sale.
     * @type {string}
     * @memberof BooksVolumeSaleInfo
     */
    onSaleDate?: string;
    /**
     * RetailPrice: The actual selling price of the book. This is the same as the
     * suggested retail or list price unless there are offers or discounts on this
     * volume. (In LITE projection.)
     * @type {BooksVolumeSaleInfoRetailPrice}
     * @memberof BooksVolumeSaleInfo
     */
    retailPrice?: BooksVolumeSaleInfoRetailPrice;
    /**
     * Saleability: Whether or not this book is available for sale or offered for
     * free in the Google eBookstore for the country listed above. Possible values
     * are FOR_SALE, FOR_RENTAL_ONLY, FOR_SALE_AND_RENTAL, FREE, NOT_FOR_SALE, or
     * FOR_PREORDER.
     * @type {string}
     * @memberof BooksVolumeSaleInfo
     */
    saleability?: string;
}

/**
 * Check if a given object implements the BooksVolumeSaleInfo interface.
 */
export function instanceOfBooksVolumeSaleInfo(value: object): value is BooksVolumeSaleInfo {
    return true;
}

export function BooksVolumeSaleInfoFromJSON(json: any): BooksVolumeSaleInfo {
    return BooksVolumeSaleInfoFromJSONTyped(json, false);
}

export function BooksVolumeSaleInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BooksVolumeSaleInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'buyLink': json['buyLink'] == null ? undefined : json['buyLink'],
        'country': json['country'] == null ? undefined : json['country'],
        'isEbook': json['isEbook'] == null ? undefined : json['isEbook'],
        'listPrice': json['listPrice'] == null ? undefined : BooksVolumeSaleInfoListPriceFromJSON(json['listPrice']),
        'offers': json['offers'] == null ? undefined : ((json['offers'] as Array<any>).map(BooksVolumeSaleInfoOffersFromJSON)),
        'onSaleDate': json['onSaleDate'] == null ? undefined : json['onSaleDate'],
        'retailPrice': json['retailPrice'] == null ? undefined : BooksVolumeSaleInfoRetailPriceFromJSON(json['retailPrice']),
        'saleability': json['saleability'] == null ? undefined : json['saleability'],
    };
}

export function BooksVolumeSaleInfoToJSON(json: any): BooksVolumeSaleInfo {
    return BooksVolumeSaleInfoToJSONTyped(json, false);
}

export function BooksVolumeSaleInfoToJSONTyped(value?: BooksVolumeSaleInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'buyLink': value['buyLink'],
        'country': value['country'],
        'isEbook': value['isEbook'],
        'listPrice': BooksVolumeSaleInfoListPriceToJSON(value['listPrice']),
        'offers': value['offers'] == null ? undefined : ((value['offers'] as Array<any>).map(BooksVolumeSaleInfoOffersToJSON)),
        'onSaleDate': value['onSaleDate'],
        'retailPrice': BooksVolumeSaleInfoRetailPriceToJSON(value['retailPrice']),
        'saleability': value['saleability'],
    };
}

