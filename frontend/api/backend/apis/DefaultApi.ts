/* tslint:disable */
/* eslint-disable */
/**
 * ssg-example
 * example backend for static site generation
 *
 * The version of the OpenAPI document: 1.0
 * Contact: koeshiro@yandex.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BooksVolume,
  BooksVolumes,
} from '../models/index';
import {
    BooksVolumeFromJSON,
    BooksVolumeToJSON,
    BooksVolumesFromJSON,
    BooksVolumesToJSON,
} from '../models/index';

export interface BookIdGetRequest {
    id: string;
}

export interface BooksGetRequest {
    query: string;
    startIndex: number;
    maxResults: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Book info from google library
     */
    async bookIdGetRaw(requestParameters: BookIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooksVolume>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling bookIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/book/:id`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooksVolumeFromJSON(jsonValue));
    }

    /**
     * Book info from google library
     */
    async bookIdGet(requestParameters: BookIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooksVolume> {
        const response = await this.bookIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of books from google library
     */
    async booksGetRaw(requestParameters: BooksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BooksVolumes>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling booksGet().'
            );
        }

        if (requestParameters['startIndex'] == null) {
            throw new runtime.RequiredError(
                'startIndex',
                'Required parameter "startIndex" was null or undefined when calling booksGet().'
            );
        }

        if (requestParameters['maxResults'] == null) {
            throw new runtime.RequiredError(
                'maxResults',
                'Required parameter "maxResults" was null or undefined when calling booksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['startIndex'] = requestParameters['startIndex'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/books`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BooksVolumesFromJSON(jsonValue));
    }

    /**
     * List of books from google library
     */
    async booksGet(requestParameters: BooksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BooksVolumes> {
        const response = await this.booksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
